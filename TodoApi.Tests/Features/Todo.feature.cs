// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:1.0.0.0
//      Reqnroll Generator Version:1.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TodoApi.Tests.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "1.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Todo")]
    public partial class TodoFeature
    {
        
        private Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "Todo.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(null, NUnit.Framework.TestContext.CurrentContext.WorkerId);
            Reqnroll.FeatureInfo featureInfo = new Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Todo", "A simple todo API", ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await testRunner.OnFeatureEndAsync();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("List open items")]
        public async System.Threading.Tasks.Task ListOpenItems()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("List open items", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 4
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                Reqnroll.Table table1 = new Reqnroll.Table(new string[] {
                            "Id",
                            "Title",
                            "Text",
                            "CreatedAt",
                            "UpdatedAt",
                            "Completed",
                            "CompletedAt"});
                table1.AddRow(new string[] {
                            "1",
                            "Test",
                            "Testtext",
                            "2024-02-09",
                            "2024-02-09",
                            "false",
                            ""});
                table1.AddRow(new string[] {
                            "2",
                            "Test",
                            "Testtext",
                            "2024-02-09",
                            "2024-02-09",
                            "true",
                            ""});
#line 5
        await testRunner.GivenAsync("the following todo items in database", ((string)(null)), table1, "Given ");
#line hidden
#line 9
        await testRunner.WhenAsync("I run a GET request with endpoint /open", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 10
        await testRunner.ThenAsync("the returned status should be code 200", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
#line 11
        await testRunner.AndAsync("the result should be", "[\r\n    {\r\n        \"id\": 1,\r\n        \"title\": \"Test\",\r\n        \"text\": \"Testtext\"," +
                        "\r\n        \"createdAt\": \"2024-02-09\",\r\n        \"updatedAt\": \"2024-02-09\",\r\n      " +
                        "  \"completed\": false,\r\n        \"completedAt\": null\r\n    }\r\n]", ((Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add new todo item")]
        public async System.Threading.Tasks.Task AddNewTodoItem()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Add new todo item", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 26
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 27
        await testRunner.WhenAsync("I run a POST request with endpoint /add", "    {\r\n    \"title\": \"93c86eab-a71b-4d0a-ae01-101c4ea2e945\",\r\n    \"text\": \"70f7ba6" +
                        "c-a066-48e0-bb98-cdfce6ec7030\"\r\n    }", ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 34
        await testRunner.ThenAsync("the returned status should be code 200", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
                Reqnroll.Table table2 = new Reqnroll.Table(new string[] {
                            "Title",
                            "Text",
                            "Completed"});
                table2.AddRow(new string[] {
                            "93c86eab-a71b-4d0a-ae01-101c4ea2e945",
                            "70f7ba6c-a066-48e0-bb98-cdfce6ec7030",
                            "false"});
#line 35
        await testRunner.AndAsync("the following todo item should exist in the database", ((string)(null)), table2, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update title and text")]
        public async System.Threading.Tasks.Task UpdateTitleAndText()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Update title and text", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 39
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                Reqnroll.Table table3 = new Reqnroll.Table(new string[] {
                            "Id",
                            "Title",
                            "Text",
                            "CreatedAt",
                            "UpdatedAt",
                            "Completed",
                            "CompletedAt"});
                table3.AddRow(new string[] {
                            "1",
                            "Inital title",
                            "First text",
                            "2024-02-09",
                            "2024-02-09",
                            "false",
                            ""});
#line 40
        await testRunner.GivenAsync("the following todo items in database", ((string)(null)), table3, "Given ");
#line hidden
#line 43
        await testRunner.WhenAsync("I run PUT request with endpoint /update/1", "{\r\n    \"title\": \"910ef365-b4a7-4b60-a123-85019d86cd8c\",\r\n    \"text\": \"78d52a51-78" +
                        "c3-4e98-9b39-dfa8d805434d\"\r\n}", ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 50
        await testRunner.ThenAsync("the returned status should be code 200", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
                Reqnroll.Table table4 = new Reqnroll.Table(new string[] {
                            "Title",
                            "Text",
                            "Completed"});
                table4.AddRow(new string[] {
                            "910ef365-b4a7-4b60-a123-85019d86cd8c",
                            "78d52a51-78c3-4e98-9b39-dfa8d805434d",
                            "false"});
#line 51
        await testRunner.AndAsync("the following todo item should exist in the database", ((string)(null)), table4, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
